[{"/Users/imanmalhi/Documents/web3/alchemy/smart-contract-ui/src/index.js":"1","/Users/imanmalhi/Documents/web3/alchemy/smart-contract-ui/src/App.js":"2","/Users/imanmalhi/Documents/web3/alchemy/smart-contract-ui/src/reportWebVitals.js":"3","/Users/imanmalhi/Documents/web3/alchemy/smart-contract-ui/src/HelloWorld.js":"4","/Users/imanmalhi/Documents/web3/alchemy/smart-contract-ui/src/util/interact.js":"5"},{"size":500,"mtime":1675067141816,"results":"6","hashOfConfig":"7"},{"size":182,"mtime":1675067141814,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1675067141816,"results":"9","hashOfConfig":"7"},{"size":3304,"mtime":1675148950537,"results":"10","hashOfConfig":"7"},{"size":3885,"mtime":1675148733931,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"160m905",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"22"},"/Users/imanmalhi/Documents/web3/alchemy/smart-contract-ui/src/index.js",[],"/Users/imanmalhi/Documents/web3/alchemy/smart-contract-ui/src/App.js",[],"/Users/imanmalhi/Documents/web3/alchemy/smart-contract-ui/src/reportWebVitals.js",[],"/Users/imanmalhi/Documents/web3/alchemy/smart-contract-ui/src/HelloWorld.js",["23","24"],"/Users/imanmalhi/Documents/web3/alchemy/smart-contract-ui/src/util/interact.js",["25","26","27"],"require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey); \n\nconst contractABI = require('../contract-abi.json')\nconst contractAddress = \"0xEcF02A3CD85e9aF179509bC132441a610dc66B44\";\n\nexport const helloWorldContract = new web3.eth.Contract(\n  contractABI,\n  contractAddress\n);\n\nexport const loadCurrentMessage = async () => { \n    const message = await helloWorldContract.methods.message().call(); \n    return message;\n};\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const obj = {\n          status: \"👆🏽 Write a message in the text-field above.\",\n          address: addressArray[0],\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\n  export const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\n  export const updateMessage = async (address, message) => {\n\n    //input error handling\n    if (!window.ethereum || address === null) {\n      return {\n        status:\n          \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n      };\n    }\n  \n    if (message.trim() === \"\") {\n      return {\n        status: \"❌ Your message cannot be an empty string.\",\n      };\n    }\n  \n    //set up transaction parameters\n    const transactionParameters = {\n      to: contractAddress, // Required except during contract publications.\n      from: address, // must match user's active address.\n      data: helloWorldContract.methods.update(message).encodeABI(),\n    };\n  \n    //sign the transaction\n    try {\n      const txHash = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [transactionParameters],\n      });\n      return {\n        status: (\n          <span>\n            ✅{\" \"}\n            <a target=\"_blank\" href={`https://goerli.etherscan.io/tx/${txHash}`}>\n              View the status of your transaction on Etherscan!\n            </a>\n            <br />\n            ℹ️ Once the transaction is verified by the network, the message will\n            be updated automatically.\n          </span>\n        ),\n      };\n    } catch (error) {\n      return {\n        status: \"😥 \" + error.message,\n      };\n    }\n  };\n",{"ruleId":"28","severity":1,"message":"29","line":11,"column":8,"nodeType":"30","messageId":"31","endLine":11,"endColumn":19},{"ruleId":"32","severity":1,"message":"33","line":66,"column":11,"nodeType":"34","messageId":"35","endLine":66,"endColumn":68,"fix":"36"},{"ruleId":"32","severity":1,"message":"33","line":44,"column":15,"nodeType":"34","messageId":"35","endLine":44,"endColumn":72,"fix":"37"},{"ruleId":"32","severity":1,"message":"33","line":86,"column":15,"nodeType":"34","messageId":"35","endLine":86,"endColumn":72,"fix":"38"},{"ruleId":"32","severity":1,"message":"33","line":130,"column":13,"nodeType":"34","messageId":"35","endLine":130,"endColumn":82,"fix":"39"},"no-unused-vars","'alchemylogo' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"40","text":"41"},{"range":"42","text":"41"},{"range":"43","text":"41"},{"range":"44","text":"41"},[1851,1851]," rel=\"noreferrer\"",[1235,1235],[2297,2297],[3500,3500]]