{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spreadArray } from \"tslib\";\nimport { fromHex, toHex } from \"../util/hex\";\nimport { throwIfCancelled } from \"../util/promises\";\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed\n * for a week.\n */\nvar MAX_BACKFILL_BLOCKS = 120;\n/**\n * The maximum number of requests that can be included in a single batch request.\n * This value is enforced by the backend.\n */\nvar MAX_BATCH_SIZE = 10;\nexport function makeBackfiller(jsonRpcSenders) {\n  return {\n    getNewHeadsBackfill: getNewHeadsBackfill,\n    getLogsBackfill: getLogsBackfill\n  };\n  function getNewHeadsBackfill(isCancelled, previousHeads, fromBlockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var toBlockNumber, lastSeenBlockNumber, minBlockNumber, reorgHeads, intermediateHeads;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            throwIfCancelled(isCancelled);\n            return [4 /*yield*/, getBlockNumber()];\n          case 1:\n            toBlockNumber = _a.sent();\n            throwIfCancelled(isCancelled);\n            if (previousHeads.length === 0) {\n              return [2 /*return*/, getHeadEventsInRange(Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1, toBlockNumber + 1)];\n            }\n            lastSeenBlockNumber = fromHex(previousHeads[previousHeads.length - 1].number);\n            minBlockNumber = Math.max(0, lastSeenBlockNumber - MAX_BACKFILL_BLOCKS);\n            if (lastSeenBlockNumber < minBlockNumber) {\n              return [2 /*return*/, getHeadEventsInRange(minBlockNumber, toBlockNumber + 1)];\n            }\n            return [4 /*yield*/, getReorgHeads(isCancelled, previousHeads)];\n          case 2:\n            reorgHeads = _a.sent();\n            throwIfCancelled(isCancelled);\n            return [4 /*yield*/, getHeadEventsInRange(lastSeenBlockNumber + 1, toBlockNumber + 1)];\n          case 3:\n            intermediateHeads = _a.sent();\n            throwIfCancelled(isCancelled);\n            return [2 /*return*/, __spreadArray(__spreadArray([], __read(reorgHeads)), __read(intermediateHeads))];\n        }\n      });\n    });\n  }\n  function getReorgHeads(isCancelled, previousHeads) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, i, oldEvent, blockHead;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            result = [];\n            i = previousHeads.length - 1;\n            _a.label = 1;\n          case 1:\n            if (!(i >= 0)) return [3 /*break*/, 4];\n            oldEvent = previousHeads[i];\n            return [4 /*yield*/, getBlockByNumber(fromHex(oldEvent.number))];\n          case 2:\n            blockHead = _a.sent();\n            throwIfCancelled(isCancelled);\n            if (oldEvent.hash === blockHead.hash) {\n              return [3 /*break*/, 4];\n            }\n            result.push(toNewHeadsEvent(blockHead));\n            _a.label = 3;\n          case 3:\n            i--;\n            return [3 /*break*/, 1];\n          case 4:\n            return [2 /*return*/, result.reverse()];\n        }\n      });\n    });\n  }\n  function getHeadEventsInRange(fromBlockInclusive, toBlockExclusive) {\n    return __awaiter(this, void 0, void 0, function () {\n      var batchParts, headEventBatches, i, batchedBlockHeads, blockHeads;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (fromBlockInclusive >= toBlockExclusive) {\n              return [2 /*return*/, []];\n            }\n            batchParts = [];\n            headEventBatches = [];\n            for (i = fromBlockInclusive; i < toBlockExclusive; i++) {\n              batchParts.push({\n                method: \"eth_getBlockByNumber\",\n                params: [toHex(i), false]\n              });\n              if (batchParts.length % MAX_BATCH_SIZE === 0) {\n                headEventBatches.push(jsonRpcSenders.sendBatch(batchParts));\n                batchParts = [];\n              }\n            }\n            if (batchParts.length > 0) {\n              headEventBatches.push(jsonRpcSenders.sendBatch(batchParts));\n            }\n            return [4 /*yield*/, Promise.all(headEventBatches)];\n          case 1:\n            batchedBlockHeads = _a.sent();\n            blockHeads = batchedBlockHeads.reduce(function (acc, batch) {\n              return acc.concat(batch);\n            }, []);\n            return [2 /*return*/, blockHeads.map(toNewHeadsEvent)];\n        }\n      });\n    });\n  }\n  function getBlockByNumber(blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, jsonRpcSenders.send(\"eth_getBlockByNumber\", [toHex(blockNumber), false])];\n      });\n    });\n  }\n  function getLogsBackfill(isCancelled, filter, previousLogs, fromBlockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var toBlockNumber, lastSeenBlockNumber, minBlockNumber, commonAncestorNumber, removedLogs, addedLogs;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            throwIfCancelled(isCancelled);\n            return [4 /*yield*/, getBlockNumber()];\n          case 1:\n            toBlockNumber = _a.sent();\n            throwIfCancelled(isCancelled);\n            if (previousLogs.length === 0) {\n              return [2 /*return*/, getLogsInRange(filter, Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1, toBlockNumber + 1)];\n            }\n            lastSeenBlockNumber = fromHex(previousLogs[previousLogs.length - 1].blockNumber);\n            minBlockNumber = Math.max(0, lastSeenBlockNumber - MAX_BACKFILL_BLOCKS);\n            if (lastSeenBlockNumber < minBlockNumber) {\n              return [2 /*return*/, getLogsInRange(filter, minBlockNumber, toBlockNumber + 1)];\n            }\n            return [4 /*yield*/, getCommonAncestorNumber(isCancelled, previousLogs)];\n          case 2:\n            commonAncestorNumber = _a.sent();\n            throwIfCancelled(isCancelled);\n            removedLogs = previousLogs.filter(function (log) {\n              return fromHex(log.blockNumber) > commonAncestorNumber;\n            }).map(function (log) {\n              return __assign(__assign({}, log), {\n                removed: true\n              });\n            });\n            return [4 /*yield*/, getLogsInRange(filter, commonAncestorNumber + 1, toBlockNumber + 1)];\n          case 3:\n            addedLogs = _a.sent();\n            throwIfCancelled(isCancelled);\n            return [2 /*return*/, __spreadArray(__spreadArray([], __read(removedLogs)), __read(addedLogs))];\n        }\n      });\n    });\n  }\n  function getCommonAncestorNumber(isCancelled, previousLogs) {\n    return __awaiter(this, void 0, void 0, function () {\n      var i, _a, blockHash, blockNumber, hash;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            i = previousLogs.length - 1;\n            _b.label = 1;\n          case 1:\n            if (!(i >= 0)) return [3 /*break*/, 4];\n            _a = previousLogs[i], blockHash = _a.blockHash, blockNumber = _a.blockNumber;\n            return [4 /*yield*/, getBlockByNumber(fromHex(blockNumber))];\n          case 2:\n            hash = _b.sent().hash;\n            throwIfCancelled(isCancelled);\n            if (blockHash === hash) {\n              return [2 /*return*/, fromHex(blockNumber)];\n            }\n            _b.label = 3;\n          case 3:\n            i--;\n            return [3 /*break*/, 1];\n          case 4:\n            return [2 /*return*/, Number.NEGATIVE_INFINITY];\n        }\n      });\n    });\n  }\n  function getLogsInRange(filter, fromBlockInclusive, toBlockExclusive) {\n    return __awaiter(this, void 0, void 0, function () {\n      var rangeFilter;\n      return __generator(this, function (_a) {\n        if (fromBlockInclusive >= toBlockExclusive) {\n          return [2 /*return*/, []];\n        }\n        rangeFilter = __assign(__assign({}, filter), {\n          fromBlock: toHex(fromBlockInclusive),\n          toBlock: toHex(toBlockExclusive - 1)\n        });\n        return [2 /*return*/, jsonRpcSenders.send(\"eth_getLogs\", [rangeFilter])];\n      });\n    });\n  }\n  function getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockNumberHex;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, jsonRpcSenders.send(\"eth_blockNumber\")];\n          case 1:\n            blockNumberHex = _a.sent();\n            return [2 /*return*/, fromHex(blockNumberHex)];\n        }\n      });\n    });\n  }\n}\nfunction toNewHeadsEvent(head) {\n  var result = __assign({}, head);\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\nexport function dedupeNewHeads(events) {\n  return dedupe(events, function (event) {\n    return event.hash;\n  });\n}\nexport function dedupeLogs(events) {\n  return dedupe(events, function (event) {\n    return event.blockHash + \"/\" + event.logIndex;\n  });\n}\nfunction dedupe(items, getKey) {\n  var keysSeen = new Set();\n  var result = [];\n  items.forEach(function (item) {\n    var key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}","map":{"version":3,"sources":["../../../src/subscriptions/subscriptionBackfill.ts"],"names":[],"mappings":"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","sourcesContent":["import { fromHex, toHex } from \"../util/hex\";\nimport { BatchPart, JsonRpcSenders } from \"../util/jsonRpc\";\nimport { throwIfCancelled } from \"../util/promises\";\n\nexport interface NewHeadsEvent {\n  author: string;\n  difficulty: string;\n  extraData: string;\n  gasLimit: string;\n  gasUsed: string;\n  hash: string;\n  logsBloom: string;\n  miner: string;\n  mixHash: string;\n  nonce: string;\n  number: string;\n  parentHash: string;\n  receiptsRoot: string;\n  sealFields: string[];\n  sha3Uncles: string;\n  size: string;\n  stateRoot: string;\n  timestamp: string;\n  transactionsRoot: string;\n}\n\n/**\n * The return type of eth_getBlocksByHash.\n */\nexport interface BlockHead extends NewHeadsEvent {\n  totalDifficulty: string;\n  transactions: any[];\n  uncles: string[];\n}\n\nexport interface LogsEvent {\n  address: string;\n  blockHash: string;\n  blockNumber: string;\n  data: string;\n  logIndex: string;\n  topics: string[];\n  transactionHash: string;\n  transactionIndex: string;\n  removed?: boolean;\n}\n\nexport interface LogsSubscriptionFilter {\n  address?: string | string[];\n  topics?: Array<string | string[] | null>;\n}\n\ninterface GetLogsOptions extends LogsSubscriptionFilter {\n  fromBlock?: string;\n  toBlock?: string;\n}\n\nexport type Backfiller = ReturnType<typeof makeBackfiller>;\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed\n * for a week.\n */\nconst MAX_BACKFILL_BLOCKS = 120;\n\n/**\n * The maximum number of requests that can be included in a single batch request.\n * This value is enforced by the backend.\n */\nconst MAX_BATCH_SIZE = 10;\n\nexport function makeBackfiller(jsonRpcSenders: JsonRpcSenders) {\n  return { getNewHeadsBackfill, getLogsBackfill };\n\n  async function getNewHeadsBackfill(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n    fromBlockNumber: number,\n  ): Promise<NewHeadsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await getBlockNumber();\n    throwIfCancelled(isCancelled);\n    if (previousHeads.length === 0) {\n      return getHeadEventsInRange(\n        Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1,\n        toBlockNumber + 1,\n      );\n    }\n    const lastSeenBlockNumber = fromHex(\n      previousHeads[previousHeads.length - 1].number,\n    );\n    const minBlockNumber = Math.max(\n      0,\n      lastSeenBlockNumber - MAX_BACKFILL_BLOCKS,\n    );\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n    }\n    const reorgHeads: NewHeadsEvent[] = await getReorgHeads(\n      isCancelled,\n      previousHeads,\n    );\n    throwIfCancelled(isCancelled);\n    const intermediateHeads: NewHeadsEvent[] = await getHeadEventsInRange(\n      lastSeenBlockNumber + 1,\n      toBlockNumber + 1,\n    );\n    throwIfCancelled(isCancelled);\n    return [...reorgHeads, ...intermediateHeads];\n  }\n\n  async function getReorgHeads(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n  ): Promise<NewHeadsEvent[]> {\n    const result: NewHeadsEvent[] = [];\n    for (let i = previousHeads.length - 1; i >= 0; i--) {\n      const oldEvent = previousHeads[i];\n      const blockHead = await getBlockByNumber(fromHex(oldEvent.number));\n      throwIfCancelled(isCancelled);\n      if (oldEvent.hash === blockHead.hash) {\n        break;\n      }\n      result.push(toNewHeadsEvent(blockHead));\n    }\n    return result.reverse();\n  }\n\n  async function getHeadEventsInRange(\n    fromBlockInclusive: number,\n    toBlockExclusive: number,\n  ): Promise<NewHeadsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    let batchParts: BatchPart[] = [];\n    const headEventBatches: Array<Promise<BlockHead[]>> = [];\n    for (let i = fromBlockInclusive; i < toBlockExclusive; i++) {\n      batchParts.push({\n        method: \"eth_getBlockByNumber\",\n        params: [toHex(i), false],\n      });\n      if (batchParts.length % MAX_BATCH_SIZE === 0) {\n        headEventBatches.push(jsonRpcSenders.sendBatch(batchParts));\n        batchParts = [];\n      }\n    }\n\n    if (batchParts.length > 0) {\n      headEventBatches.push(jsonRpcSenders.sendBatch(batchParts));\n    }\n\n    const batchedBlockHeads = await Promise.all(headEventBatches);\n    const blockHeads = batchedBlockHeads.reduce(\n      (acc, batch) => acc.concat(batch),\n      [],\n    );\n    return blockHeads.map(toNewHeadsEvent);\n  }\n\n  async function getBlockByNumber(blockNumber: number): Promise<BlockHead> {\n    return jsonRpcSenders.send(\"eth_getBlockByNumber\", [\n      toHex(blockNumber),\n      false,\n    ]);\n  }\n\n  async function getLogsBackfill(\n    isCancelled: () => boolean,\n    filter: LogsSubscriptionFilter,\n    previousLogs: LogsEvent[],\n    fromBlockNumber: number,\n  ): Promise<LogsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await getBlockNumber();\n    throwIfCancelled(isCancelled);\n    if (previousLogs.length === 0) {\n      return getLogsInRange(\n        filter,\n        Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1,\n        toBlockNumber + 1,\n      );\n    }\n    const lastSeenBlockNumber = fromHex(\n      previousLogs[previousLogs.length - 1].blockNumber,\n    );\n    const minBlockNumber = Math.max(\n      0,\n      lastSeenBlockNumber - MAX_BACKFILL_BLOCKS,\n    );\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n    }\n    const commonAncestorNumber = await getCommonAncestorNumber(\n      isCancelled,\n      previousLogs,\n    );\n    throwIfCancelled(isCancelled);\n    const removedLogs = previousLogs\n      .filter((log) => fromHex(log.blockNumber) > commonAncestorNumber)\n      .map((log) => ({ ...log, removed: true }));\n    const addedLogs = await getLogsInRange(\n      filter,\n      commonAncestorNumber + 1,\n      toBlockNumber + 1,\n    );\n    throwIfCancelled(isCancelled);\n    return [...removedLogs, ...addedLogs];\n  }\n\n  async function getCommonAncestorNumber(\n    isCancelled: () => boolean,\n    previousLogs: LogsEvent[],\n  ): Promise<number> {\n    for (let i = previousLogs.length - 1; i >= 0; i--) {\n      const { blockHash, blockNumber } = previousLogs[i];\n      const { hash } = await getBlockByNumber(fromHex(blockNumber));\n      throwIfCancelled(isCancelled);\n      if (blockHash === hash) {\n        return fromHex(blockNumber);\n      }\n    }\n    return Number.NEGATIVE_INFINITY;\n  }\n\n  async function getLogsInRange(\n    filter: LogsSubscriptionFilter,\n    fromBlockInclusive: number,\n    toBlockExclusive: number,\n  ): Promise<LogsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const rangeFilter: GetLogsOptions = {\n      ...filter,\n      fromBlock: toHex(fromBlockInclusive),\n      toBlock: toHex(toBlockExclusive - 1),\n    };\n    return jsonRpcSenders.send(\"eth_getLogs\", [rangeFilter]);\n  }\n\n  async function getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await jsonRpcSenders.send(\"eth_blockNumber\");\n    return fromHex(blockNumberHex);\n  }\n}\n\nfunction toNewHeadsEvent(head: BlockHead): NewHeadsEvent {\n  const result: NewHeadsEvent & Partial<BlockHead> = { ...head };\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events: NewHeadsEvent[]): NewHeadsEvent[] {\n  return dedupe(events, (event) => event.hash);\n}\n\nexport function dedupeLogs(events: LogsEvent[]): LogsEvent[] {\n  return dedupe(events, (event) => `${event.blockHash}/${event.logIndex}`);\n}\n\nfunction dedupe<T>(items: T[], getKey: (item: T) => any): T[] {\n  const keysSeen: Set<any> = new Set();\n  const result: T[] = [];\n  items.forEach((item) => {\n    const key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}