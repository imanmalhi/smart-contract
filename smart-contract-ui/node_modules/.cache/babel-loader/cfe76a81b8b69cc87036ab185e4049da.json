{"ast":null,"code":"var _jsxFileName = \"/Users/imanmalhi/Documents/web3/alchemy/smart-contract-ui/src/util/interact.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nrequire('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractABI = require('../contract-abi.json');\nconst contractAddress = \"0xEcF02A3CD85e9aF179509bC132441a610dc66B44\";\nexport const helloWorldContract = new web3.eth.Contract(contractABI, contractAddress);\nexport const loadCurrentMessage = async () => {\n  const message = await helloWorldContract.methods.message().call();\n  return message;\n};\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)\n    };\n  }\n};\nexport const updateMessage = async (address, message) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n  if (message.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\"\n    };\n  }\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: helloWorldContract.methods.update(message).encodeABI()\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://goerli.etherscan.io/tx/${txHash}`,\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), \"\\u2139\\uFE0F Once the transaction is verified by the network, the message will be updated automatically.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};","map":{"version":3,"names":["require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","helloWorldContract","eth","Contract","loadCurrentMessage","message","methods","call","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","getCurrentWalletConnected","length","updateMessage","trim","transactionParameters","to","from","data","update","encodeABI","txHash","params","error"],"sources":["/Users/imanmalhi/Documents/web3/alchemy/smart-contract-ui/src/util/interact.js"],"sourcesContent":["require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey); \n\nconst contractABI = require('../contract-abi.json')\nconst contractAddress = \"0xEcF02A3CD85e9aF179509bC132441a610dc66B44\";\n\nexport const helloWorldContract = new web3.eth.Contract(\n  contractABI,\n  contractAddress\n);\n\nexport const loadCurrentMessage = async () => { \n    const message = await helloWorldContract.methods.message().call(); \n    return message;\n};\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const obj = {\n          status: \"👆🏽 Write a message in the text-field above.\",\n          address: addressArray[0],\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\n  export const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\n  export const updateMessage = async (address, message) => {\n\n    //input error handling\n    if (!window.ethereum || address === null) {\n      return {\n        status:\n          \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n      };\n    }\n  \n    if (message.trim() === \"\") {\n      return {\n        status: \"❌ Your message cannot be an empty string.\",\n      };\n    }\n  \n    //set up transaction parameters\n    const transactionParameters = {\n      to: contractAddress, // Required except during contract publications.\n      from: address, // must match user's active address.\n      data: helloWorldContract.methods.update(message).encodeABI(),\n    };\n  \n    //sign the transaction\n    try {\n      const txHash = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [transactionParameters],\n      });\n      return {\n        status: (\n          <span>\n            ✅{\" \"}\n            <a target=\"_blank\" href={`https://goerli.etherscan.io/tx/${txHash}`}>\n              View the status of your transaction on Etherscan!\n            </a>\n            <br />\n            ℹ️ Once the transaction is verified by the network, the message will\n            be updated automatically.\n          </span>\n        ),\n      };\n    } catch (error) {\n      return {\n        status: \"😥 \" + error.message,\n      };\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}