{"ast":null,"code":"import { __read, __spreadArray, __values } from \"tslib\";\nimport { isResponse } from \"../types\";\nexport function makeWebSocketSender(ws) {\n  var contextsById = new Map();\n  ws.addEventListener(\"message\", function (message) {\n    var response = JSON.parse(message.data);\n    if (!isResponse(response)) {\n      return;\n    }\n    var id = getIdFromResponse(response);\n    if (id === undefined) {\n      return;\n    }\n    var context = contextsById.get(id);\n    if (!context) {\n      return;\n    }\n    var resolve = context.resolve;\n    contextsById.delete(id);\n    if (!Array.isArray(response) && response.error && response.error.code === 429) {\n      resolve({\n        type: \"rateLimit\"\n      });\n    } else {\n      resolve({\n        response: response,\n        type: \"jsonrpc\"\n      });\n    }\n  });\n  ws.addEventListener(\"down\", function () {\n    __spreadArray([], __read(contextsById)).forEach(function (_a) {\n      var _b = __read(_a, 2),\n        id = _b[0],\n        _c = _b[1],\n        request = _c.request,\n        resolve = _c.resolve;\n      if (isWrite(request)) {\n        // Writes cannot be resent because they will fail for a duplicate nonce.\n        contextsById.delete(id);\n        resolve({\n          type: \"networkError\",\n          status: 0,\n          message: \"WebSocket closed before receiving a response for write request with id: \" + id + \".\"\n        });\n      }\n    });\n  });\n  ws.addEventListener(\"reopen\", function () {\n    var e_1, _a;\n    try {\n      for (var _b = __values(contextsById.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var request = _c.value.request;\n        ws.send(JSON.stringify(request));\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  });\n  return function (request) {\n    return new Promise(function (resolve) {\n      var id = getIdFromRequest(request);\n      if (id !== undefined) {\n        var existingContext = contextsById.get(id);\n        if (existingContext) {\n          var message = \"Another WebSocket request was made with the same id (\" + id + \") before a response was received.\";\n          console.error(message);\n          existingContext.resolve({\n            message: message,\n            type: \"networkError\",\n            status: 0\n          });\n        }\n        contextsById.set(id, {\n          request: request,\n          resolve: resolve\n        });\n      }\n      ws.send(JSON.stringify(request));\n    });\n  };\n}\nfunction getIdFromRequest(request) {\n  if (!Array.isArray(request)) {\n    return request.id;\n  }\n  return getCanonicalIdFromList(request.map(function (p) {\n    return p.id;\n  }));\n}\nfunction getIdFromResponse(response) {\n  if (!Array.isArray(response)) {\n    return response.id;\n  }\n  return getCanonicalIdFromList(response.map(function (p) {\n    return p.id;\n  }));\n}\n/**\n * Since the JSON-RPC spec allows responses to be returned in a different order\n * than sent, we need a mechanism for choosing a canonical id from a list that\n * doesn't depend on the order. This chooses the \"minimum\" id by an arbitrary\n * ordering: the smallest string if possible, otherwise the smallest number,\n * otherwise null.\n */\nfunction getCanonicalIdFromList(ids) {\n  var stringIds = ids.filter(function (id) {\n    return typeof id === \"string\";\n  });\n  if (stringIds.length > 0) {\n    return stringIds.reduce(function (bestId, id) {\n      return bestId < id ? bestId : id;\n    });\n  }\n  var numberIds = ids.filter(function (id) {\n    return typeof id === \"number\";\n  });\n  if (numberIds.length > 0) {\n    return Math.min.apply(Math, __spreadArray([], __read(numberIds)));\n  }\n  return ids.indexOf(null) >= 0 ? null : undefined;\n}\nfunction isWrite(request) {\n  return Array.isArray(request) ? request.every(isSingleWrite) : isSingleWrite(request);\n}\nvar WRITE_METHODS = [\"eth_sendTransaction\", \"eth_sendRawTransaction\"];\nfunction isSingleWrite(request) {\n  return WRITE_METHODS.includes(request.method);\n}","map":{"version":3,"sources":["../../../src/web3-adapter/alchemySendWebSocket.ts"],"names":[],"mappings":"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","sourcesContent":["import SturdyWebSocket from \"sturdy-websocket\";\nimport {\n  isResponse,\n  JsonRpcId,\n  JsonRpcRequest,\n  SingleOrBatchRequest,\n  SingleOrBatchResponse,\n  WebSocketMessage,\n} from \"../types\";\nimport {\n  AlchemySendJsonRpcFunction,\n  AlchemySendJsonRpcResult,\n} from \"./alchemySend\";\n\ninterface RequestContext {\n  request: SingleOrBatchRequest;\n  resolve(response: AlchemySendJsonRpcResult): void;\n}\n\nexport function makeWebSocketSender(\n  ws: SturdyWebSocket,\n): AlchemySendJsonRpcFunction {\n  const contextsById = new Map<JsonRpcId, RequestContext>();\n  ws.addEventListener(\"message\", (message) => {\n    const response: WebSocketMessage = JSON.parse(message.data);\n    if (!isResponse(response)) {\n      return;\n    }\n    const id = getIdFromResponse(response);\n    if (id === undefined) {\n      return;\n    }\n    const context = contextsById.get(id);\n    if (!context) {\n      return;\n    }\n    const { resolve } = context;\n    contextsById.delete(id);\n    if (\n      !Array.isArray(response) &&\n      response.error &&\n      response.error.code === 429\n    ) {\n      resolve({ type: \"rateLimit\" });\n    } else {\n      resolve({ response, type: \"jsonrpc\" });\n    }\n  });\n  ws.addEventListener(\"down\", () => {\n    [...contextsById].forEach(([id, { request, resolve }]) => {\n      if (isWrite(request)) {\n        // Writes cannot be resent because they will fail for a duplicate nonce.\n        contextsById.delete(id);\n        resolve({\n          type: \"networkError\",\n          status: 0,\n          message: `WebSocket closed before receiving a response for write request with id: ${id}.`,\n        });\n      }\n    });\n  });\n  ws.addEventListener(\"reopen\", () => {\n    for (const { request } of contextsById.values()) {\n      ws.send(JSON.stringify(request));\n    }\n  });\n\n  return (request) =>\n    new Promise((resolve) => {\n      const id = getIdFromRequest(request);\n      if (id !== undefined) {\n        const existingContext = contextsById.get(id);\n        if (existingContext) {\n          const message = `Another WebSocket request was made with the same id (${id}) before a response was received.`;\n          console.error(message);\n          existingContext.resolve({\n            message,\n            type: \"networkError\",\n            status: 0,\n          });\n        }\n        contextsById.set(id, { request, resolve });\n      }\n      ws.send(JSON.stringify(request));\n    });\n}\n\nfunction getIdFromRequest(\n  request: SingleOrBatchRequest,\n): JsonRpcId | undefined {\n  if (!Array.isArray(request)) {\n    return request.id;\n  }\n  return getCanonicalIdFromList(request.map((p) => p.id));\n}\n\nfunction getIdFromResponse(\n  response: SingleOrBatchResponse,\n): JsonRpcId | undefined {\n  if (!Array.isArray(response)) {\n    return response.id;\n  }\n  return getCanonicalIdFromList(response.map((p) => p.id));\n}\n\n/**\n * Since the JSON-RPC spec allows responses to be returned in a different order\n * than sent, we need a mechanism for choosing a canonical id from a list that\n * doesn't depend on the order. This chooses the \"minimum\" id by an arbitrary\n * ordering: the smallest string if possible, otherwise the smallest number,\n * otherwise null.\n */\nfunction getCanonicalIdFromList(\n  ids: Array<JsonRpcId | undefined>,\n): JsonRpcId | undefined {\n  const stringIds: string[] = ids.filter((id) => typeof id === \"string\") as any;\n  if (stringIds.length > 0) {\n    return stringIds.reduce((bestId, id) => (bestId < id ? bestId : id));\n  }\n  const numberIds: number[] = ids.filter((id) => typeof id === \"number\") as any;\n  if (numberIds.length > 0) {\n    return Math.min(...numberIds);\n  }\n  return ids.indexOf(null) >= 0 ? null : undefined;\n}\n\nfunction isWrite(request: SingleOrBatchRequest): boolean {\n  return Array.isArray(request)\n    ? request.every(isSingleWrite)\n    : isSingleWrite(request);\n}\n\nconst WRITE_METHODS = [\"eth_sendTransaction\", \"eth_sendRawTransaction\"];\n\nfunction isSingleWrite(request: JsonRpcRequest): boolean {\n  return WRITE_METHODS.includes(request.method);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}