{"ast":null,"code":"import SturdyWebSocket from \"sturdy-websocket\";\nimport { w3cwebsocket } from \"websocket\";\nimport { makeJsonRpcPayloadFactory, makeJsonRpcSenders } from \"../util/jsonRpc\";\nimport { VERSION } from \"../version\";\nimport { makeJsonRpcHttpSender } from \"./alchemySendHttp\";\nimport { makeWebSocketSender } from \"./alchemySendWebSocket\";\nimport { makeAlchemyHttpProvider } from \"./httpProvider\";\nimport { makeJsonRpcPayloadSender } from \"./sendJsonRpcPayload\";\nimport { makeRestPayloadSender } from \"./sendRestPayload\";\nimport { AlchemyWebSocketProvider } from \"./webSocketProvider\";\nvar NODE_MAX_WS_FRAME_SIZE = 100 * 1024 * 1024; // 100 MB\nexport function makeAlchemyContext(url, config) {\n  var makeJsonRpcPayload = makeJsonRpcPayloadFactory();\n  var restSender = makeRestPayloadSender({\n    config: config,\n    url: url\n  });\n  if (/^https?:\\/\\//.test(url)) {\n    var alchemySendJsonrRpc = makeJsonRpcHttpSender(url);\n    var _a = makeJsonRpcPayloadSender(alchemySendJsonrRpc, config),\n      sendJsonRpcPayload = _a.sendJsonRpcPayload,\n      setWriteProvider = _a.setWriteProvider;\n    var jsonRpcSenders = makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload);\n    var provider = makeAlchemyHttpProvider(sendJsonRpcPayload);\n    return {\n      provider: provider,\n      jsonRpcSenders: jsonRpcSenders,\n      restSender: restSender,\n      setWriteProvider: setWriteProvider\n    };\n  } else if (/^wss?:\\/\\//.test(url)) {\n    var protocol = isAlchemyUrl(url) ? \"alchemy-web3-\" + VERSION : undefined;\n    var ws = new SturdyWebSocket(url, protocol, {\n      wsConstructor: getWebSocketConstructor()\n    });\n    var alchemySend = makeWebSocketSender(ws);\n    var _b = makeJsonRpcPayloadSender(alchemySend, config),\n      sendJsonRpcPayload = _b.sendJsonRpcPayload,\n      setWriteProvider = _b.setWriteProvider;\n    var jsonRpcSenders = makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload);\n    var provider = new AlchemyWebSocketProvider(ws, sendJsonRpcPayload, jsonRpcSenders);\n    return {\n      provider: provider,\n      jsonRpcSenders: jsonRpcSenders,\n      restSender: restSender,\n      setWriteProvider: setWriteProvider\n    };\n  } else {\n    throw new Error(\"Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: \" + url);\n  }\n}\nfunction getWebSocketConstructor() {\n  return isNodeEnvironment() ? function (url, protocols) {\n    return new w3cwebsocket(url, protocols, undefined, undefined, undefined, {\n      maxReceivedMessageSize: NODE_MAX_WS_FRAME_SIZE,\n      maxReceivedFrameSize: NODE_MAX_WS_FRAME_SIZE\n    });\n  } : WebSocket;\n}\nfunction isNodeEnvironment() {\n  return typeof process !== \"undefined\" && process != null && process.versions != null && process.versions.node != null;\n}\nfunction isAlchemyUrl(url) {\n  return url.indexOf(\"alchemy.com\") >= 0 || url.indexOf(\"alchemyapi.io\") >= 0;\n}","map":{"version":3,"sources":["../../../src/web3-adapter/alchemyContext.ts"],"names":[],"mappings":"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","sourcesContent":["import SturdyWebSocket from \"sturdy-websocket\";\nimport { w3cwebsocket } from \"websocket\";\nimport { FullConfig, Provider } from \"../types\";\nimport {\n  JsonRpcSenders,\n  makeJsonRpcPayloadFactory,\n  makeJsonRpcSenders,\n} from \"../util/jsonRpc\";\nimport { VERSION } from \"../version\";\nimport { makeJsonRpcHttpSender } from \"./alchemySendHttp\";\nimport { makeWebSocketSender } from \"./alchemySendWebSocket\";\nimport { makeAlchemyHttpProvider } from \"./httpProvider\";\nimport { makeJsonRpcPayloadSender } from \"./sendJsonRpcPayload\";\nimport { makeRestPayloadSender, RestPayloadSender } from \"./sendRestPayload\";\nimport { AlchemyWebSocketProvider } from \"./webSocketProvider\";\n\nconst NODE_MAX_WS_FRAME_SIZE = 100 * 1024 * 1024; // 100 MB\n\nexport interface AlchemyContext {\n  provider: any;\n  restSender: RestPayloadSender;\n  jsonRpcSenders: JsonRpcSenders;\n  setWriteProvider(provider: Provider | null | undefined): void;\n}\n\nexport function makeAlchemyContext(\n  url: string,\n  config: FullConfig,\n): AlchemyContext {\n  const makeJsonRpcPayload = makeJsonRpcPayloadFactory();\n  const restSender = makeRestPayloadSender({\n    config,\n    url,\n  });\n  if (/^https?:\\/\\//.test(url)) {\n    const alchemySendJsonrRpc = makeJsonRpcHttpSender(url);\n    const { sendJsonRpcPayload, setWriteProvider } = makeJsonRpcPayloadSender(\n      alchemySendJsonrRpc,\n      config,\n    );\n    const jsonRpcSenders = makeJsonRpcSenders(\n      sendJsonRpcPayload,\n      makeJsonRpcPayload,\n    );\n    const provider = makeAlchemyHttpProvider(sendJsonRpcPayload);\n    return { provider, jsonRpcSenders, restSender, setWriteProvider };\n  } else if (/^wss?:\\/\\//.test(url)) {\n    const protocol = isAlchemyUrl(url) ? `alchemy-web3-${VERSION}` : undefined;\n    const ws = new SturdyWebSocket(url, protocol, {\n      wsConstructor: getWebSocketConstructor(),\n    });\n    const alchemySend = makeWebSocketSender(ws);\n    const { sendJsonRpcPayload, setWriteProvider } = makeJsonRpcPayloadSender(\n      alchemySend,\n      config,\n    );\n    const jsonRpcSenders = makeJsonRpcSenders(\n      sendJsonRpcPayload,\n      makeJsonRpcPayload,\n    );\n    const provider = new AlchemyWebSocketProvider(\n      ws,\n      sendJsonRpcPayload,\n      jsonRpcSenders,\n    );\n    return { provider, jsonRpcSenders, restSender, setWriteProvider };\n  } else {\n    throw new Error(\n      `Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: ${url}`,\n    );\n  }\n}\n\nfunction getWebSocketConstructor(): any {\n  return isNodeEnvironment()\n    ? (url: string, protocols?: string | string[] | undefined) =>\n        new w3cwebsocket(url, protocols, undefined, undefined, undefined, {\n          maxReceivedMessageSize: NODE_MAX_WS_FRAME_SIZE,\n          maxReceivedFrameSize: NODE_MAX_WS_FRAME_SIZE,\n        })\n    : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== \"undefined\" &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\nfunction isAlchemyUrl(url: string): boolean {\n  return url.indexOf(\"alchemy.com\") >= 0 || url.indexOf(\"alchemyapi.io\") >= 0;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}