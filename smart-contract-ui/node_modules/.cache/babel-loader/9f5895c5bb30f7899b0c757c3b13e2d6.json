{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport function makeJsonRpcPayloadFactory() {\n  var nextId = 0;\n  return function (method, params) {\n    return {\n      method: method,\n      params: params,\n      jsonrpc: \"2.0\",\n      id: \"alc-web3:\" + nextId++\n    };\n  };\n}\nexport function makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload) {\n  var _this = this;\n  var send = function (method, params) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, sendJsonRpcPayload(makeJsonRpcPayload(method, params))];\n          case 1:\n            response = _a.sent();\n            if (response.error) {\n              throw new Error(response.error.message);\n            }\n            return [2 /*return*/, response.result];\n        }\n      });\n    });\n  };\n  function sendBatch(parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, response, message, errorResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            payload = parts.map(function (_a) {\n              var method = _a.method,\n                params = _a.params;\n              return makeJsonRpcPayload(method, params);\n            });\n            return [4 /*yield*/, sendJsonRpcPayload(payload)];\n          case 1:\n            response = _a.sent();\n            if (!Array.isArray(response)) {\n              message = response.error ? response.error.message : \"Batch request failed\";\n              throw new Error(message);\n            }\n            errorResponse = response.find(function (r) {\n              return !!r.error;\n            });\n            if (errorResponse) {\n              throw new Error(errorResponse.error.message);\n            }\n            // The ids are ascending numbers because that's what Payload Factories do.\n            return [2 /*return*/, response.sort(function (r1, r2) {\n              return r1.id - r2.id;\n            }).map(function (r) {\n              return r.result;\n            })];\n        }\n      });\n    });\n  }\n  return {\n    send: send,\n    sendBatch: sendBatch\n  };\n}\nexport function makeResponse(id, result) {\n  return {\n    jsonrpc: \"2.0\",\n    id: id,\n    result: result\n  };\n}","map":{"version":3,"sources":["../../../src/util/jsonRpc.ts"],"names":[],"mappings":";AAuBA,OAAM,SAAU,yBAAyB,GAAA;EACvC,IAAI,MAAM,GAAG,CAAC;EACd,OAAO,UAAC,MAAM,EAAE,MAAM,EAAA;IAAK,OAAC;MAC1B,MAAM,EAAA,MAAA;MACN,MAAM,EAAA,MAAA;MACN,OAAO,EAAE,KAAK;MACd,EAAE,EAAE,WAAA,GAAY,MAAM;KACvB;EAL0B,CAKzB;AACJ;AAEA,OAAM,SAAU,kBAAkB,CAChC,kBAA8C,EAC9C,kBAAyC,EAAA;EAF3C,IAAA,KAAA,GAAA,IAAA;EAIE,IAAM,IAAI,GAAwB,UAAO,MAAM,EAAE,MAAM,EAAA;IAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;YACpC,OAAA,CAAA,CAAA,CAAA,WAAM,kBAAkB,CACvC,kBAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,CACnC,CAAA;;YAFK,QAAQ,GAAG,EAAA,CAAA,IAAA,EAEhB;YACD,IAAI,QAAQ,CAAC,KAAK,EAAE;cAClB,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC;YACxC;YACD,OAAA,CAAA,CAAA,CAAA,YAAO,QAAQ,CAAC,MAAM,CAAA;QAAC;;;GACxB;EAED,SAAe,SAAS,CAAC,KAAkB,EAAA;;;;;;YACnC,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,UAAC,EAAkB,EAAA;kBAAhB,MAAM,GAAA,EAAA,CAAA,MAAA;gBAAE,MAAM,GAAA,EAAA,CAAA,MAAA;cACzC,OAAA,kBAAkB,CAAC,MAAM,EAAE,MAAM,CAAC;YAAlC,CAAkC,CACnC;YACgB,OAAA,CAAA,CAAA,CAAA,WAAM,kBAAkB,CAAC,OAAO,CAAC,CAAA;;YAA5C,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAiC;YAClD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;cACtB,OAAO,GAAG,QAAQ,CAAC,KAAK,GAC1B,QAAQ,CAAC,KAAK,CAAC,OAAO,GACtB,sBAAsB;cAC1B,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC;YACzB;YACK,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAC,EAAA;cAAK,OAAA,CAAC,CAAC,CAAC,CAAC,KAAK;YAAT,CAAS,CAAC;YACrD,IAAI,aAAa,EAAE;cACjB,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,KAAM,CAAC,OAAO,CAAC;YAC9C;YACD;YACA,OAAA,CAAA,CAAA,CAAA,YAAO,QAAQ,CACZ,IAAI,CAAC,UAAC,EAAE,EAAE,EAAE,EAAA;cAAK,OAAC,EAAE,CAAC,EAAa,GAAI,EAAE,CAAC,EAAa;YAArC,CAAqC,CAAC,CACvD,GAAG,CAAC,UAAC,CAAC,EAAA;cAAK,OAAA,CAAC,CAAC,MAAM;YAAR,CAAQ,CAAC,CAAA;QAAC;;;EACzB;EAED,OAAO;IAAE,IAAI,EAAA,IAAA;IAAE,SAAS,EAAA;EAAA,CAAE;AAC5B;AAEA,OAAM,SAAU,YAAY,CAAI,EAAa,EAAE,MAAS,EAAA;EACtD,OAAO;IAAE,OAAO,EAAE,KAAK;IAAE,EAAE,EAAA,EAAA;IAAE,MAAM,EAAA;EAAA,CAAE;AACvC","sourcesContent":["import {\n  JsonRpcId,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SendJsonRpcFunction,\n} from \"../types\";\nimport { SendJsonRpcPayloadFunction } from \"../web3-adapter/sendJsonRpcPayload\";\n\nexport type JsonRpcPayloadFactory = (\n  method: string,\n  params?: any[],\n) => JsonRpcRequest;\n\nexport interface JsonRpcSenders {\n  send: SendJsonRpcFunction;\n  sendBatch(parts: BatchPart[]): Promise<any[]>;\n}\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport function makeJsonRpcPayloadFactory(): JsonRpcPayloadFactory {\n  let nextId = 0;\n  return (method, params) => ({\n    method,\n    params,\n    jsonrpc: \"2.0\",\n    id: `alc-web3:${nextId++}`,\n  });\n}\n\nexport function makeJsonRpcSenders(\n  sendJsonRpcPayload: SendJsonRpcPayloadFunction,\n  makeJsonRpcPayload: JsonRpcPayloadFactory,\n): JsonRpcSenders {\n  const send: SendJsonRpcFunction = async (method, params) => {\n    const response = await sendJsonRpcPayload(\n      makeJsonRpcPayload(method, params),\n    );\n    if (response.error) {\n      throw new Error(response.error.message);\n    }\n    return response.result;\n  };\n\n  async function sendBatch(parts: BatchPart[]): Promise<any[]> {\n    const payload = parts.map(({ method, params }) =>\n      makeJsonRpcPayload(method, params),\n    );\n    const response = await sendJsonRpcPayload(payload);\n    if (!Array.isArray(response)) {\n      const message = response.error\n        ? response.error.message\n        : \"Batch request failed\";\n      throw new Error(message);\n    }\n    const errorResponse = response.find((r) => !!r.error);\n    if (errorResponse) {\n      throw new Error(errorResponse.error!.message);\n    }\n    // The ids are ascending numbers because that's what Payload Factories do.\n    return response\n      .sort((r1, r2) => (r1.id as number) - (r2.id as number))\n      .map((r) => r.result);\n  }\n\n  return { send, sendBatch };\n}\n\nexport function makeResponse<T>(id: JsonRpcId, result: T): JsonRpcResponse<T> {\n  return { jsonrpc: \"2.0\", id, result };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}