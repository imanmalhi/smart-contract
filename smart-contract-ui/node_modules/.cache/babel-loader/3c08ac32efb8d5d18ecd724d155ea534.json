{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator, __read, __spreadArray, __values } from \"tslib\";\nimport EventEmitter from \"eventemitter3\";\nimport { dedupeLogs, dedupeNewHeads, makeBackfiller } from \"../subscriptions/subscriptionBackfill\";\nimport { isSubscriptionEvent } from \"../types\";\nimport { fromHex } from \"../util/hex\";\nimport { makeResponse } from \"../util/jsonRpc\";\nimport { callWhenDone, makeCancelToken, throwIfCancelled, withBackoffRetries, withTimeout } from \"../util/promises\";\nvar HEARTBEAT_INTERVAL = 30000;\nvar HEARTBEAT_WAIT_TIME = 10000;\nvar BACKFILL_TIMEOUT = 60000;\nvar BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\nvar RETAINED_EVENT_BLOCK_COUNT = 10;\nvar AlchemyWebSocketProvider = /** @class */function (_super) {\n  __extends(AlchemyWebSocketProvider, _super);\n  function AlchemyWebSocketProvider(ws, sendJsonRpcPayload, jsonRpcSenders) {\n    var _this = _super.call(this) || this;\n    _this.ws = ws;\n    _this.sendJsonRpcPayload = sendJsonRpcPayload;\n    _this.jsonRpcSenders = jsonRpcSenders;\n    // In the case of a WebSocket reconnection, all subscriptions are lost and we\n    // create new ones to replace them, but we want to create the illusion that\n    // the original subscriptions persist. Thus, maintain a mapping from the\n    // \"virtual\" subscription ids which are visible to the consumer to the\n    // \"physical\" subscription ids of the actual connections. This terminology is\n    // borrowed from virtual and physical memory, which has a similar mapping.\n    _this.virtualSubscriptionsById = new Map();\n    _this.virtualIdsByPhysicalId = new Map();\n    _this.cancelBackfill = noop;\n    _this.startHeartbeat = function () {\n      if (_this.heartbeatIntervalId != null) {\n        return;\n      }\n      _this.heartbeatIntervalId = setInterval(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _b.trys.push([0, 2,, 3]);\n                return [4 /*yield*/, withTimeout(this.jsonRpcSenders.send(\"net_version\"), HEARTBEAT_WAIT_TIME)];\n              case 1:\n                _b.sent();\n                return [3 /*break*/, 3];\n              case 2:\n                _a = _b.sent();\n                this.ws.reconnect();\n                return [3 /*break*/, 3];\n              case 3:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, HEARTBEAT_INTERVAL);\n    };\n    _this.stopHeartbeatAndBackfill = function () {\n      if (_this.heartbeatIntervalId != null) {\n        clearInterval(_this.heartbeatIntervalId);\n        _this.heartbeatIntervalId = undefined;\n      }\n      _this.cancelBackfill();\n    };\n    _this.handleMessage = function (event) {\n      var message = JSON.parse(event.data);\n      if (!isSubscriptionEvent(message)) {\n        return;\n      }\n      var physicalId = message.params.subscription;\n      var virtualId = _this.virtualIdsByPhysicalId.get(physicalId);\n      if (!virtualId) {\n        return;\n      }\n      var subscription = _this.virtualSubscriptionsById.get(virtualId);\n      if (subscription.method !== \"eth_subscribe\") {\n        _this.emitGenericEvent(virtualId, message.params.result);\n        return;\n      }\n      switch (subscription.params[0]) {\n        case \"newHeads\":\n          {\n            var newHeadsSubscription = subscription;\n            var newHeadsMessage = message;\n            var isBackfilling = newHeadsSubscription.isBackfilling,\n              backfillBuffer = newHeadsSubscription.backfillBuffer;\n            var result = newHeadsMessage.params.result;\n            if (isBackfilling) {\n              addToNewHeadsEventsBuffer(backfillBuffer, result);\n            } else {\n              _this.emitNewHeadsEvent(virtualId, result);\n            }\n            break;\n          }\n        case \"logs\":\n          {\n            var logsSubscription = subscription;\n            var logsMessage = message;\n            var isBackfilling = logsSubscription.isBackfilling,\n              backfillBuffer = logsSubscription.backfillBuffer;\n            var result = logsMessage.params.result;\n            if (isBackfilling) {\n              addToLogsEventsBuffer(backfillBuffer, result);\n            } else {\n              _this.emitLogsEvent(virtualId, result);\n            }\n            break;\n          }\n        default:\n          _this.emitGenericEvent(virtualId, message.params.result);\n      }\n    };\n    _this.handleReopen = function () {\n      var e_1, _a;\n      _this.virtualIdsByPhysicalId.clear();\n      var _b = makeCancelToken(),\n        cancel = _b.cancel,\n        isCancelled = _b.isCancelled;\n      _this.cancelBackfill = cancel;\n      var _loop_1 = function (subscription) {\n        (function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var error_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2,, 3]);\n                  return [4 /*yield*/, this.resubscribeAndBackfill(isCancelled, subscription)];\n                case 1:\n                  _a.sent();\n                  return [3 /*break*/, 3];\n                case 2:\n                  error_1 = _a.sent();\n                  if (!isCancelled()) {\n                    console.error(\"Error while backfilling \\\"\" + subscription.params[0] + \"\\\" subscription. Some events may be missing.\", error_1);\n                  }\n                  return [3 /*break*/, 3];\n                case 3:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        })();\n      };\n\n      try {\n        for (var _c = __values(_this.virtualSubscriptionsById.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var subscription = _d.value;\n          _loop_1(subscription);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      _this.startHeartbeat();\n    };\n    _this.backfiller = makeBackfiller(jsonRpcSenders);\n    _this.addSocketListeners();\n    _this.startHeartbeat();\n    return _this;\n  }\n  AlchemyWebSocketProvider.prototype.send = function (request, callback) {\n    if (isSubscribeRequest(request)) {\n      var id = request.id;\n      if (id === undefined) {\n        // The JSON-RPC spec says to return nothing if there is no request id.\n        return;\n      }\n      callWhenDone(this.subscribe(request), callback);\n      return;\n    }\n    if (isUnsubscribeRequest(request)) {\n      callWhenDone(this.unsubscribe(request), callback);\n      return;\n    }\n    callWhenDone(this.sendJsonRpcPayload(request), callback);\n  };\n  AlchemyWebSocketProvider.prototype.supportsSubscriptions = function () {\n    return true;\n  };\n  AlchemyWebSocketProvider.prototype.disconnect = function (code, reason) {\n    this.removeSocketListeners();\n    this.removeAllListeners();\n    this.stopHeartbeatAndBackfill();\n    this.ws.close(code, reason);\n  };\n  AlchemyWebSocketProvider.prototype.connect = function () {\n    // No-op. We're already connected when passed a websocket in the\n    // constructor.\n  };\n  AlchemyWebSocketProvider.prototype.reset = function () {\n    // No-op.\n  };\n  AlchemyWebSocketProvider.prototype.reconnect = function () {\n    // No-op. This isn't called anywhere.\n  };\n  AlchemyWebSocketProvider.prototype.subscribe = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var method, _a, params, startingBlockNumber, response, id;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            method = request.method, _a = request.params, params = _a === void 0 ? [] : _a;\n            return [4 /*yield*/, this.getBlockNumber()];\n          case 1:\n            startingBlockNumber = _b.sent();\n            return [4 /*yield*/, this.sendJsonRpcPayload(request)];\n          case 2:\n            response = _b.sent();\n            id = response.result;\n            this.virtualSubscriptionsById.set(id, {\n              method: method,\n              params: params,\n              startingBlockNumber: startingBlockNumber,\n              virtualId: id,\n              physicalId: id,\n              sentEvents: [],\n              isBackfilling: false,\n              backfillBuffer: []\n            });\n            this.virtualIdsByPhysicalId.set(id, id);\n            return [2 /*return*/, makeResponse(request.id, id)];\n        }\n      });\n    });\n  };\n  AlchemyWebSocketProvider.prototype.unsubscribe = function (request) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionId, virtualSubscription, physicalId, physicalRequest;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            subscriptionId = (_a = request.params) === null || _a === void 0 ? void 0 : _a[0];\n            virtualSubscription = this.virtualSubscriptionsById.get(subscriptionId);\n            if (!virtualSubscription) {\n              return [2 /*return*/, makeResponse(request.id, false)];\n            }\n            physicalId = virtualSubscription.physicalId;\n            physicalRequest = __assign(__assign({}, request), {\n              params: [physicalId]\n            });\n            return [4 /*yield*/, this.sendJsonRpcPayload(physicalRequest)];\n          case 1:\n            _b.sent();\n            this.virtualSubscriptionsById.delete(subscriptionId);\n            this.virtualIdsByPhysicalId.delete(physicalId);\n            return [2 /*return*/, makeResponse(request.id, true)];\n        }\n      });\n    });\n  };\n  AlchemyWebSocketProvider.prototype.addSocketListeners = function () {\n    this.ws.addEventListener(\"message\", this.handleMessage);\n    this.ws.addEventListener(\"reopen\", this.handleReopen);\n    this.ws.addEventListener(\"down\", this.stopHeartbeatAndBackfill);\n  };\n  AlchemyWebSocketProvider.prototype.removeSocketListeners = function () {\n    this.ws.removeEventListener(\"message\", this.handleMessage);\n    this.ws.removeEventListener(\"reopen\", this.handleReopen);\n    this.ws.removeEventListener(\"down\", this.stopHeartbeatAndBackfill);\n  };\n  AlchemyWebSocketProvider.prototype.resubscribeAndBackfill = function (isCancelled, subscription) {\n    return __awaiter(this, void 0, void 0, function () {\n      var virtualId, method, params, sentEvents, backfillBuffer, startingBlockNumber, physicalId, _a, backfillEvents, events, filter_1, backfillEvents, events;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            virtualId = subscription.virtualId, method = subscription.method, params = subscription.params, sentEvents = subscription.sentEvents, backfillBuffer = subscription.backfillBuffer, startingBlockNumber = subscription.startingBlockNumber;\n            subscription.isBackfilling = true;\n            backfillBuffer.length = 0;\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1,, 9, 10]);\n            return [4 /*yield*/, this.jsonRpcSenders.send(method, params)];\n          case 2:\n            physicalId = _b.sent();\n            throwIfCancelled(isCancelled);\n            subscription.physicalId = physicalId;\n            this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n            _a = params[0];\n            switch (_a) {\n              case \"newHeads\":\n                return [3 /*break*/, 3];\n              case \"logs\":\n                return [3 /*break*/, 5];\n            }\n            return [3 /*break*/, 7];\n          case 3:\n            return [4 /*yield*/, withBackoffRetries(function () {\n              return withTimeout(_this.backfiller.getNewHeadsBackfill(isCancelled, sentEvents, startingBlockNumber), BACKFILL_TIMEOUT);\n            }, BACKFILL_RETRIES, function () {\n              return !isCancelled();\n            })];\n          case 4:\n            backfillEvents = _b.sent();\n            throwIfCancelled(isCancelled);\n            events = dedupeNewHeads(__spreadArray(__spreadArray([], __read(backfillEvents)), __read(backfillBuffer)));\n            events.forEach(function (event) {\n              return _this.emitNewHeadsEvent(virtualId, event);\n            });\n            return [3 /*break*/, 8];\n          case 5:\n            filter_1 = params[1] || {};\n            return [4 /*yield*/, withBackoffRetries(function () {\n              return withTimeout(_this.backfiller.getLogsBackfill(isCancelled, filter_1, sentEvents, startingBlockNumber), BACKFILL_TIMEOUT);\n            }, BACKFILL_RETRIES, function () {\n              return !isCancelled();\n            })];\n          case 6:\n            backfillEvents = _b.sent();\n            throwIfCancelled(isCancelled);\n            events = dedupeLogs(__spreadArray(__spreadArray([], __read(backfillEvents)), __read(backfillBuffer)));\n            events.forEach(function (event) {\n              return _this.emitLogsEvent(virtualId, event);\n            });\n            return [3 /*break*/, 8];\n          case 7:\n            return [3 /*break*/, 8];\n          case 8:\n            return [3 /*break*/, 10];\n          case 9:\n            subscription.isBackfilling = false;\n            backfillBuffer.length = 0;\n            return [7 /*endfinally*/];\n          case 10:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AlchemyWebSocketProvider.prototype.getBlockNumber = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockNumberHex;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.jsonRpcSenders.send(\"eth_blockNumber\")];\n          case 1:\n            blockNumberHex = _a.sent();\n            return [2 /*return*/, fromHex(blockNumberHex)];\n        }\n      });\n    });\n  };\n  AlchemyWebSocketProvider.prototype.emitNewHeadsEvent = function (virtualId, result) {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  };\n  AlchemyWebSocketProvider.prototype.emitLogsEvent = function (virtualId, result) {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  };\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   */\n  AlchemyWebSocketProvider.prototype.emitAndRememberEvent = function (virtualId, result, getBlockNumber) {\n    var subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n    addToPastEventsBuffer(subscription.sentEvents, __assign({}, result), getBlockNumber);\n    this.emitGenericEvent(virtualId, result);\n  };\n  AlchemyWebSocketProvider.prototype.emitGenericEvent = function (virtualId, result) {\n    var event = {\n      jsonrpc: \"2.0\",\n      method: \"eth_subscription\",\n      params: {\n        subscription: virtualId,\n        result: result\n      }\n    };\n    this.emit(\"data\", event);\n  };\n  return AlchemyWebSocketProvider;\n}(EventEmitter);\nexport { AlchemyWebSocketProvider };\nfunction addToNewHeadsEventsBuffer(pastEvents, event) {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\nfunction addToLogsEventsBuffer(pastEvents, event) {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n/**\n * Adds a new event to an array of events, evicting any events which\n * are so old that they will no longer feasibly be part of a reorg.\n */\nfunction addToPastEventsBuffer(pastEvents, event, getBlockNumber) {\n  var currentBlockNumber = getBlockNumber(event);\n  // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n  var firstGoodIndex = pastEvents.findIndex(function (e) {\n    return getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT;\n  });\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n  pastEvents.push(event);\n}\nfunction isSubscribeRequest(request) {\n  return !Array.isArray(request) && request.method === \"eth_subscribe\";\n}\nfunction isUnsubscribeRequest(request) {\n  return !Array.isArray(request) && request.method === \"eth_unsubscribe\";\n}\nfunction getNewHeadsBlockNumber(event) {\n  return fromHex(event.number);\n}\nfunction getLogsBlockNumber(event) {\n  return fromHex(event.blockNumber);\n}\nfunction noop() {\n  // Nothing.\n}","map":{"version":3,"sources":["../../../src/web3-adapter/webSocketProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import EventEmitter from \"eventemitter3\";\nimport SturdyWebSocket from \"sturdy-websocket\";\nimport {\n  Backfiller,\n  dedupeLogs,\n  dedupeNewHeads,\n  LogsEvent,\n  LogsSubscriptionFilter,\n  makeBackfiller,\n  NewHeadsEvent,\n} from \"../subscriptions/subscriptionBackfill\";\nimport {\n  isSubscriptionEvent,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SingleOrBatchRequest,\n  SingleOrBatchResponse,\n  SubscriptionEvent,\n  WebSocketMessage,\n} from \"../types\";\nimport { fromHex } from \"../util/hex\";\nimport { JsonRpcSenders, makeResponse } from \"../util/jsonRpc\";\nimport {\n  callWhenDone,\n  makeCancelToken,\n  throwIfCancelled,\n  withBackoffRetries,\n  withTimeout,\n} from \"../util/promises\";\nimport { SendJsonRpcPayloadFunction } from \"./sendJsonRpcPayload\";\n\nconst HEARTBEAT_INTERVAL = 30000;\nconst HEARTBEAT_WAIT_TIME = 10000;\nconst BACKFILL_TIMEOUT = 60000;\nconst BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\nconst RETAINED_EVENT_BLOCK_COUNT = 10;\n\n/**\n * This is the undocumented interface required by Web3 for providers which\n * handle subscriptions.\n *\n * In addition to the stated methods here, it communicates subscription events\n * by using `EventEmitter#emit(\"data\", event)` to emit the events.\n */\nexport interface Web3SubscriptionProvider extends EventEmitter {\n  send(\n    payload: SingleOrBatchRequest,\n    callback: (error: any, response?: SingleOrBatchResponse) => void,\n  ): void;\n  disconnect(code?: number, reason?: string): void;\n  supportsSubscriptions(): true;\n  connect(): void;\n  reset(): void;\n  reconnect(): void;\n}\n\ninterface VirtualSubscription {\n  virtualId: string;\n  physicalId: string;\n  method: string;\n  params: any[];\n  isBackfilling: boolean;\n  startingBlockNumber: number;\n  sentEvents: any[];\n  backfillBuffer: any[];\n}\n\ninterface NewHeadsSubscription extends VirtualSubscription {\n  method: \"eth_subscribe\";\n  params: [\"newHeads\"];\n  isBackfilling: boolean;\n  sentEvents: NewHeadsEvent[];\n  backfillBuffer: NewHeadsEvent[];\n}\n\ninterface LogsSubscription extends VirtualSubscription {\n  method: \"eth_subscribe\";\n  params: [\"logs\", LogsSubscriptionFilter?];\n  isBackfilling: boolean;\n  sentEvents: LogsEvent[];\n  backfillBuffer: LogsEvent[];\n}\n\nexport class AlchemyWebSocketProvider\n  extends EventEmitter\n  implements Web3SubscriptionProvider\n{\n  // In the case of a WebSocket reconnection, all subscriptions are lost and we\n  // create new ones to replace them, but we want to create the illusion that\n  // the original subscriptions persist. Thus, maintain a mapping from the\n  // \"virtual\" subscription ids which are visible to the consumer to the\n  // \"physical\" subscription ids of the actual connections. This terminology is\n  // borrowed from virtual and physical memory, which has a similar mapping.\n  private readonly virtualSubscriptionsById: Map<string, VirtualSubscription> =\n    new Map();\n  private readonly virtualIdsByPhysicalId: Map<string, string> = new Map();\n  private readonly backfiller: Backfiller;\n  private heartbeatIntervalId?: NodeJS.Timeout;\n  private cancelBackfill = noop;\n\n  constructor(\n    private readonly ws: SturdyWebSocket,\n    private readonly sendJsonRpcPayload: SendJsonRpcPayloadFunction,\n    private readonly jsonRpcSenders: JsonRpcSenders,\n  ) {\n    super();\n    this.backfiller = makeBackfiller(jsonRpcSenders);\n    this.addSocketListeners();\n    this.startHeartbeat();\n  }\n\n  public send(\n    request: SingleOrBatchRequest,\n    callback: (error: any, response?: SingleOrBatchResponse) => void,\n  ): void {\n    if (isSubscribeRequest(request)) {\n      const { id } = request;\n      if (id === undefined) {\n        // The JSON-RPC spec says to return nothing if there is no request id.\n        return;\n      }\n      callWhenDone(this.subscribe(request), callback);\n      return;\n    }\n    if (isUnsubscribeRequest(request)) {\n      callWhenDone(this.unsubscribe(request), callback);\n      return;\n    }\n    callWhenDone(this.sendJsonRpcPayload(request), callback);\n  }\n\n  public supportsSubscriptions(): true {\n    return true;\n  }\n\n  public disconnect(code?: number, reason?: string): void {\n    this.removeSocketListeners();\n    this.removeAllListeners();\n    this.stopHeartbeatAndBackfill();\n    this.ws.close(code, reason);\n  }\n\n  public connect(): void {\n    // No-op. We're already connected when passed a websocket in the\n    // constructor.\n  }\n\n  public reset(): void {\n    // No-op.\n  }\n\n  public reconnect(): void {\n    // No-op. This isn't called anywhere.\n  }\n\n  private async subscribe(request: JsonRpcRequest): Promise<JsonRpcResponse> {\n    const { method, params = [] } = request;\n    const startingBlockNumber = await this.getBlockNumber();\n    const response = await this.sendJsonRpcPayload(request);\n    const id = response.result;\n    this.virtualSubscriptionsById.set(id, {\n      method,\n      params,\n      startingBlockNumber,\n      virtualId: id,\n      physicalId: id,\n      sentEvents: [],\n      isBackfilling: false,\n      backfillBuffer: [],\n    });\n    this.virtualIdsByPhysicalId.set(id, id);\n    return makeResponse(request.id!, id);\n  }\n\n  private async unsubscribe(request: JsonRpcRequest): Promise<JsonRpcResponse> {\n    const subscriptionId = request.params?.[0];\n    const virtualSubscription =\n      this.virtualSubscriptionsById.get(subscriptionId);\n    if (!virtualSubscription) {\n      return makeResponse(request.id!, false);\n    }\n    const { physicalId } = virtualSubscription;\n    const physicalRequest = { ...request, params: [physicalId] };\n    await this.sendJsonRpcPayload(physicalRequest);\n    this.virtualSubscriptionsById.delete(subscriptionId);\n    this.virtualIdsByPhysicalId.delete(physicalId);\n    return makeResponse(request.id!, true);\n  }\n\n  private addSocketListeners(): void {\n    this.ws.addEventListener(\"message\", this.handleMessage);\n    this.ws.addEventListener(\"reopen\", this.handleReopen);\n    this.ws.addEventListener(\"down\", this.stopHeartbeatAndBackfill);\n  }\n\n  private removeSocketListeners(): void {\n    this.ws.removeEventListener(\"message\", this.handleMessage);\n    this.ws.removeEventListener(\"reopen\", this.handleReopen);\n    this.ws.removeEventListener(\"down\", this.stopHeartbeatAndBackfill);\n  }\n\n  private startHeartbeat = (): void => {\n    if (this.heartbeatIntervalId != null) {\n      return;\n    }\n    this.heartbeatIntervalId = setInterval(async () => {\n      try {\n        await withTimeout(\n          this.jsonRpcSenders.send(\"net_version\"),\n          HEARTBEAT_WAIT_TIME,\n        );\n      } catch {\n        this.ws.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  };\n\n  private stopHeartbeatAndBackfill = (): void => {\n    if (this.heartbeatIntervalId != null) {\n      clearInterval(this.heartbeatIntervalId);\n      this.heartbeatIntervalId = undefined;\n    }\n    this.cancelBackfill();\n  };\n\n  private handleMessage = (event: MessageEvent): void => {\n    const message: WebSocketMessage = JSON.parse(event.data);\n    if (!isSubscriptionEvent(message)) {\n      return;\n    }\n    const physicalId = message.params.subscription;\n    const virtualId = this.virtualIdsByPhysicalId.get(physicalId);\n    if (!virtualId) {\n      return;\n    }\n    const subscription = this.virtualSubscriptionsById.get(virtualId)!;\n    if (subscription.method !== \"eth_subscribe\") {\n      this.emitGenericEvent(virtualId, message.params.result);\n      return;\n    }\n    switch (subscription.params[0]) {\n      case \"newHeads\": {\n        const newHeadsSubscription = subscription as NewHeadsSubscription;\n        const newHeadsMessage = message as SubscriptionEvent<NewHeadsEvent>;\n        const { isBackfilling, backfillBuffer } = newHeadsSubscription;\n        const { result } = newHeadsMessage.params;\n        if (isBackfilling) {\n          addToNewHeadsEventsBuffer(backfillBuffer, result);\n        } else {\n          this.emitNewHeadsEvent(virtualId, result);\n        }\n        break;\n      }\n      case \"logs\": {\n        const logsSubscription = subscription as LogsSubscription;\n        const logsMessage = message as SubscriptionEvent<LogsEvent>;\n        const { isBackfilling, backfillBuffer } = logsSubscription;\n        const { result } = logsMessage.params;\n        if (isBackfilling) {\n          addToLogsEventsBuffer(backfillBuffer, result);\n        } else {\n          this.emitLogsEvent(virtualId, result);\n        }\n        break;\n      }\n      default:\n        this.emitGenericEvent(virtualId, message.params.result);\n    }\n  };\n\n  private handleReopen = (): void => {\n    this.virtualIdsByPhysicalId.clear();\n    const { cancel, isCancelled } = makeCancelToken();\n    this.cancelBackfill = cancel;\n    for (const subscription of this.virtualSubscriptionsById.values()) {\n      (async () => {\n        try {\n          await this.resubscribeAndBackfill(isCancelled, subscription);\n        } catch (error) {\n          if (!isCancelled()) {\n            console.error(\n              `Error while backfilling \"${subscription.params[0]}\" subscription. Some events may be missing.`,\n              error,\n            );\n          }\n        }\n      })();\n    }\n    this.startHeartbeat();\n  };\n\n  private async resubscribeAndBackfill(\n    isCancelled: () => boolean,\n    subscription: VirtualSubscription,\n  ): Promise<void> {\n    const {\n      virtualId,\n      method,\n      params,\n      sentEvents,\n      backfillBuffer,\n      startingBlockNumber,\n    } = subscription;\n    subscription.isBackfilling = true;\n    backfillBuffer.length = 0;\n    try {\n      const physicalId = await this.jsonRpcSenders.send(method, params);\n      throwIfCancelled(isCancelled);\n      subscription.physicalId = physicalId;\n      this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n      switch (params[0]) {\n        case \"newHeads\": {\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getNewHeadsBackfill(\n                  isCancelled,\n                  sentEvents,\n                  startingBlockNumber,\n                ),\n                BACKFILL_TIMEOUT,\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled(),\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeNewHeads([...backfillEvents, ...backfillBuffer]);\n          events.forEach((event) => this.emitNewHeadsEvent(virtualId, event));\n          break;\n        }\n        case \"logs\": {\n          const filter: LogsSubscriptionFilter = params[1] || {};\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getLogsBackfill(\n                  isCancelled,\n                  filter,\n                  sentEvents,\n                  startingBlockNumber,\n                ),\n                BACKFILL_TIMEOUT,\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled(),\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeLogs([...backfillEvents, ...backfillBuffer]);\n          events.forEach((event) => this.emitLogsEvent(virtualId, event));\n          break;\n        }\n        default:\n          break;\n      }\n    } finally {\n      subscription.isBackfilling = false;\n      backfillBuffer.length = 0;\n    }\n  }\n\n  private async getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await this.jsonRpcSenders.send(\n      \"eth_blockNumber\",\n    );\n    return fromHex(blockNumberHex);\n  }\n\n  private emitNewHeadsEvent(virtualId: string, result: NewHeadsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  }\n\n  private emitLogsEvent(virtualId: string, result: LogsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  }\n\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   */\n  private emitAndRememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number,\n  ): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n    addToPastEventsBuffer(\n      subscription.sentEvents,\n      { ...result },\n      getBlockNumber,\n    );\n    this.emitGenericEvent(virtualId, result);\n  }\n\n  private emitGenericEvent(virtualId: string, result: any): void {\n    const event: SubscriptionEvent = {\n      jsonrpc: \"2.0\",\n      method: \"eth_subscription\",\n      params: {\n        subscription: virtualId,\n        result,\n      },\n    };\n    this.emit(\"data\", event);\n  }\n}\n\nfunction addToNewHeadsEventsBuffer(\n  pastEvents: NewHeadsEvent[],\n  event: NewHeadsEvent,\n): void {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\n\nfunction addToLogsEventsBuffer(\n  pastEvents: LogsEvent[],\n  event: LogsEvent,\n): void {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n\n/**\n * Adds a new event to an array of events, evicting any events which\n * are so old that they will no longer feasibly be part of a reorg.\n */\nfunction addToPastEventsBuffer<T>(\n  pastEvents: T[],\n  event: T,\n  getBlockNumber: (event: T) => number,\n): void {\n  const currentBlockNumber = getBlockNumber(event);\n  // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n  const firstGoodIndex = pastEvents.findIndex(\n    (e) => getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT,\n  );\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n  pastEvents.push(event);\n}\n\nfunction isSubscribeRequest(\n  request: SingleOrBatchRequest,\n): request is JsonRpcRequest {\n  return !Array.isArray(request) && request.method === \"eth_subscribe\";\n}\n\nfunction isUnsubscribeRequest(\n  request: SingleOrBatchRequest,\n): request is JsonRpcRequest {\n  return !Array.isArray(request) && request.method === \"eth_unsubscribe\";\n}\n\nfunction getNewHeadsBlockNumber(event: NewHeadsEvent): number {\n  return fromHex(event.number);\n}\n\nfunction getLogsBlockNumber(event: LogsEvent): number {\n  return fromHex(event.blockNumber);\n}\n\nfunction noop(): void {\n  // Nothing.\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}