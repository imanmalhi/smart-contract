{"ast":null,"code":"var _jsxFileName = \"/Users/imanmalhi/Documents/web3/alchemy/smart-contract-ui/src/HelloWorld.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { helloWorldContract, connectWallet, updateMessage, loadCurrentMessage, getCurrentWalletConnected } from \"./util/interact.js\";\nimport alchemylogo from \"./alchemylogo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HelloWorld = () => {\n  _s();\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(() => {\n    async function fetchMessage() {\n      const message = await loadCurrentMessage();\n      setMessage(message);\n    }\n    fetchMessage();\n    addSmartContractListener();\n    async function fetchWallet() {\n      const {\n        address,\n        status\n      } = await getCurrentWalletConnected();\n      setWallet(address);\n      setStatus(status);\n    }\n    fetchWallet();\n    addWalletListener();\n  }, []);\n  function addSmartContractListener() {\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n      if (error) {\n        setStatus(\"üò• \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"üéâ Your message has been updated!\");\n      }\n    });\n  }\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"üëÜüèΩ Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"ü¶ä Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus( /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://metamask.io/download`,\n          children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this));\n    }\n  }\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n  const onUpdatePressed = async () => {\n    const {\n      status\n    } = await updateMessage(walletAddress, newMessage);\n    setStatus(status);\n  };\n\n  //the UI of our component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"logo\",\n      src: alchemylogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"walletButton\",\n      onClick: connectWalletPressed,\n      children: walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        paddingTop: \"50px\"\n      },\n      children: \"Current Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        paddingTop: \"18px\"\n      },\n      children: \"New Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Update the message in your smart contract.\",\n        onChange: e => setNewMessage(e.target.value),\n        value: newMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"publish\",\n        onClick: onUpdatePressed,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(HelloWorld, \"Gq/QBHQMC3uFvf9JJRa28vw0vHw=\");\n_c = HelloWorld;\nexport default HelloWorld;\nvar _c;\n$RefreshReg$(_c, \"HelloWorld\");","map":{"version":3,"names":["React","useEffect","useState","helloWorldContract","connectWallet","updateMessage","loadCurrentMessage","getCurrentWalletConnected","HelloWorld","walletAddress","setWallet","status","setStatus","message","setMessage","newMessage","setNewMessage","fetchMessage","addSmartContractListener","fetchWallet","address","addWalletListener","events","UpdatedMessages","error","data","returnValues","window","ethereum","on","accounts","length","connectWalletPressed","walletResponse","onUpdatePressed","alchemylogo","String","substring","paddingTop","e","target","value"],"sources":["/Users/imanmalhi/Documents/web3/alchemy/smart-contract-ui/src/HelloWorld.js"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n  helloWorldContract,\n  connectWallet,\n  updateMessage,\n  loadCurrentMessage,\n  getCurrentWalletConnected,\n} from \"./util/interact.js\";\n\nimport alchemylogo from \"./alchemylogo.svg\";\n\nconst HelloWorld = () => {\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(() => {\n    async function fetchMessage() {\n      const message = await loadCurrentMessage();\n      setMessage(message);\n    }\n    fetchMessage();\n    addSmartContractListener();\n  \n    async function fetchWallet() {\n      const {address, status} = await getCurrentWalletConnected();\n      setWallet(address)\n      setStatus(status); \n    }\n    fetchWallet();\n    addWalletListener(); \n  }, []);\n\n  function addSmartContractListener() {\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n      if (error) {\n        setStatus(\"üò• \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"üéâ Your message has been updated!\");\n      }\n    });\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"üëÜüèΩ Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"ü¶ä Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          ü¶ä{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onUpdatePressed = async () => {\n    const { status } = await updateMessage(walletAddress, newMessage);\n    setStatus(status);\n  };\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n      <img id=\"logo\" src={alchemylogo}></img>\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\n      <p>{message}</p>\n\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\n\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Update the message in your smart contract.\"\n          onChange={(e) => setNewMessage(e.target.value)}\n          value={newMessage}\n        />\n        <p id=\"status\">{status}</p>\n\n        <button id=\"publish\" onClick={onUpdatePressed}>\n          Update\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default HelloWorld;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}