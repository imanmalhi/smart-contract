{"ast":null,"code":"import { callWhenDone } from \"../util/promises\";\n/**\n * Returns a \"provider\" which can be passed to the Web3 constructor.\n */\nexport function makeAlchemyHttpProvider(sendJsonRpcPayload) {\n  function send(payload, callback) {\n    callWhenDone(sendJsonRpcPayload(payload), callback);\n  }\n  return {\n    send: send\n  };\n}","map":{"version":3,"sources":["../../../src/web3-adapter/httpProvider.ts"],"names":[],"mappings":"AAKA,SAAS,YAAY,QAAQ,kBAAkB;AAG/C;;AAEG;AACH,OAAM,SAAU,uBAAuB,CACrC,kBAA8C,EAAA;EAE9C,SAAS,IAAI,CACX,OAA6B,EAC7B,QAA6C,EAAA;IAE7C,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC;EACrD;EACA,OAAO;IAAE,IAAI,EAAA;EAAA,CAAE;AACjB","sourcesContent":["import {\n  SingleOrBatchRequest,\n  SingleOrBatchResponse,\n  Web3Callback,\n} from \"../types\";\nimport { callWhenDone } from \"../util/promises\";\nimport { SendJsonRpcPayloadFunction } from \"./sendJsonRpcPayload\";\n\n/**\n * Returns a \"provider\" which can be passed to the Web3 constructor.\n */\nexport function makeAlchemyHttpProvider(\n  sendJsonRpcPayload: SendJsonRpcPayloadFunction,\n) {\n  function send(\n    payload: SingleOrBatchRequest,\n    callback: Web3Callback<SingleOrBatchResponse>,\n  ): void {\n    callWhenDone(sendJsonRpcPayload(payload), callback);\n  }\n  return { send };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}