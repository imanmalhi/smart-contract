{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport fetchPonyfill from \"fetch-ponyfill\";\nimport URI from \"urijs\";\nimport { delay } from \"../util/promises\";\nexport function makeRestPayloadSender(_a) {\n  var _this = this;\n  var url = _a.url,\n    config = _a.config;\n  // The rest payload sender only works for alchemy.com http endpoints.\n  var error;\n  if (/^wss?:\\/\\//.test(url)) {\n    error = \"Alchemy rest endpoints are not available via websockets\";\n  }\n  if (!url.includes(\"alchemy\")) {\n    error = \"Alchemy specific rest endpoints are not available with a non Alchemy provider.\";\n  }\n  if (url.includes(\"alchemyapi.io\") && !url.includes(\"eth-\")) {\n    error = \"Alchemy specific rest endpoints on L2 networks are not available with our legacy endpoints on alchemyapi.io. Please switch over to alchemy.com\";\n  }\n  // Don't use the native `URL` class for this. It doesn't work in React Native.\n  var urlObject = new URI(url);\n  var origin = urlObject.origin();\n  var pathname = urlObject.path();\n  var apiKey = pathname.substring(pathname.lastIndexOf(\"/\") + 1);\n  var fetch = fetchPonyfill().fetch;\n  // NFT endpoints are prefixed differently, so the path must be constructed separately\n  var NFT_ENDPOINTS = [\"getNFTs\", \"getNFTMetadata\"];\n  var NFT_PREFIX = \"nft/v2/\";\n  var isNftPath = function (path) {\n    return NFT_ENDPOINTS.includes(path);\n  };\n  var formatNftPath = function (path) {\n    return NFT_PREFIX + apiKey + \"/\" + path;\n  };\n  var sendRestPayload = function (path, payload) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var maxRetries, retryInterval, retryJitter, endpoint, i, response, status_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (error) {\n              throw new Error(error);\n            }\n            maxRetries = config.maxRetries, retryInterval = config.retryInterval, retryJitter = config.retryJitter;\n            if (!(origin && apiKey)) return [3 /*break*/, 6];\n            endpoint = new URI(origin).search(payload).path(isNftPath(path) ? formatNftPath(path) : apiKey + path).toString();\n            i = 0;\n            _a.label = 1;\n          case 1:\n            if (!(i < maxRetries + 1)) return [3 /*break*/, 5];\n            return [4 /*yield*/, fetch(endpoint)];\n          case 2:\n            response = _a.sent();\n            status_1 = response.status;\n            switch (status_1) {\n              case 200:\n                return [2 /*return*/, response.json()];\n              case 429:\n                break;\n              default:\n                throw new Error(response.status + \":\" + response.statusText);\n            }\n            return [4 /*yield*/, delay(retryInterval + (retryJitter * Math.random() | 0))];\n          case 3:\n            _a.sent();\n            _a.label = 4;\n          case 4:\n            i++;\n            return [3 /*break*/, 1];\n          case 5:\n            throw new Error(\"Rate limited for \" + (maxRetries + 1) + \" consecutive attempts.\");\n          case 6:\n            return [2 /*return*/, Promise.resolve()];\n        }\n      });\n    });\n  };\n  return {\n    sendRestPayload: sendRestPayload\n  };\n}","map":{"version":3,"sources":["../../../src/web3-adapter/sendRestPayload.ts"],"names":[],"mappings":"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","sourcesContent":["import fetchPonyfill from \"fetch-ponyfill\";\nimport URI from \"urijs\";\nimport { FullConfig } from \"../types\";\nimport { delay } from \"../util/promises\";\n\nexport interface RestPayloadSender {\n  sendRestPayload: SendRestPayloadFunction;\n}\n\nexport type SendRestPayloadFunction = (\n  path: string,\n  payload: Record<string, any>,\n) => Promise<any>;\n\nexport interface RestPayloadConfig {\n  url: string;\n  config: FullConfig;\n}\n\nexport function makeRestPayloadSender({\n  url,\n  config,\n}: RestPayloadConfig): RestPayloadSender {\n  // The rest payload sender only works for alchemy.com http endpoints.\n  let error: string | undefined;\n  if (/^wss?:\\/\\//.test(url)) {\n    error = \"Alchemy rest endpoints are not available via websockets\";\n  }\n  if (!url.includes(\"alchemy\")) {\n    error =\n      \"Alchemy specific rest endpoints are not available with a non Alchemy provider.\";\n  }\n  if (url.includes(\"alchemyapi.io\") && !url.includes(\"eth-\")) {\n    error =\n      \"Alchemy specific rest endpoints on L2 networks are not available with our legacy endpoints on alchemyapi.io. Please switch over to alchemy.com\";\n  }\n\n  // Don't use the native `URL` class for this. It doesn't work in React Native.\n  const urlObject = new URI(url);\n  const origin = urlObject.origin();\n  const pathname = urlObject.path();\n  const apiKey = pathname.substring(pathname.lastIndexOf(\"/\") + 1);\n\n  const { fetch } = fetchPonyfill();\n\n  // NFT endpoints are prefixed differently, so the path must be constructed separately\n  const NFT_ENDPOINTS = [\"getNFTs\", \"getNFTMetadata\"];\n  const NFT_PREFIX = \"nft/v2/\";\n  const isNftPath = (path: string): boolean => {\n    return NFT_ENDPOINTS.includes(path);\n  };\n  const formatNftPath = (path: string): string => {\n    return NFT_PREFIX + apiKey + \"/\" + path;\n  };\n\n  const sendRestPayload = async (\n    path: string,\n    payload: Record<string, any>,\n  ): Promise<any> => {\n    if (error) {\n      throw new Error(error);\n    }\n    const { maxRetries, retryInterval, retryJitter } = config;\n    if (origin && apiKey) {\n      const endpoint = new URI(origin)\n        .search(payload)\n        .path(isNftPath(path) ? formatNftPath(path) : apiKey + path)\n        .toString();\n      for (let i = 0; i < maxRetries + 1; i++) {\n        const response = await fetch(endpoint);\n        const { status } = response;\n        switch (status) {\n          case 200:\n            return response.json();\n          case 429:\n            break;\n          default:\n            throw new Error(response.status + \":\" + response.statusText);\n        }\n        await delay(retryInterval + ((retryJitter * Math.random()) | 0));\n      }\n      throw new Error(\n        `Rate limited for ${maxRetries + 1} consecutive attempts.`,\n      );\n    }\n    return Promise.resolve();\n  };\n\n  return {\n    sendRestPayload,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}