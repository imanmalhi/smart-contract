{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport assertNever from \"assert-never\";\nimport { delay, promisify } from \"../util/promises\";\nvar ALCHEMY_DISALLOWED_METHODS = [\"eth_accounts\", \"eth_sendTransaction\", \"eth_sign\", \"eth_signTypedData_v3\", \"eth_signTypedData\"];\nvar ALCHEMY_DISALLOWED_PREFIXES = [\"personal\"];\nexport function makeJsonRpcPayloadSender(alchemySendJsonRpc, config) {\n  // Copy middlewares from config.\n  var middlewares = [];\n  config.jsonRpcSenderMiddlewares.forEach(function (m) {\n    return middlewares.push(m);\n  });\n  var currentWriteProvider = config.writeProvider;\n  middlewares.push(function (payload) {\n    var disallowedMethod = getDisallowedMethod(payload);\n    if (!disallowedMethod) {\n      try {\n        return sendJsonRpcWithRetries(payload, alchemySendJsonRpc, config);\n      } catch (alchemyError) {\n        // Fallback to write provider, but if both fail throw the error from\n        // Alchemy.\n        if (!currentWriteProvider) {\n          throw alchemyError;\n        }\n        try {\n          return sendJsonRpcWithProvider(currentWriteProvider, payload);\n        } catch (_a) {\n          throw alchemyError;\n        }\n      }\n    } else {\n      if (!currentWriteProvider) {\n        throw new Error(\"No provider available for method \\\"\" + disallowedMethod + \"\\\"\");\n      }\n      return sendJsonRpcWithProvider(currentWriteProvider, payload);\n    }\n  });\n  var sendJsonRpcPayload = function (payload) {\n    var getNext = function (i) {\n      var middleware = middlewares[i];\n      return function () {\n        return middleware(payload, getNext(i + 1));\n      };\n    };\n    return getNext(0)();\n  };\n  function setWriteProvider(writeProvider) {\n    currentWriteProvider = writeProvider !== null && writeProvider !== void 0 ? writeProvider : null;\n  }\n  return {\n    sendJsonRpcPayload: sendJsonRpcPayload,\n    setWriteProvider: setWriteProvider\n  };\n}\nfunction sendJsonRpcWithProvider(provider, payload) {\n  var anyProvider = provider;\n  var sendMethod = (anyProvider.sendAsync ? anyProvider.sendAsync : anyProvider.send).bind(anyProvider);\n  return promisify(function (callback) {\n    return sendMethod(payload, callback);\n  });\n}\nfunction getDisallowedMethod(payload) {\n  var payloads = Array.isArray(payload) ? payload : [payload];\n  // Check if the payload method is a disallowed method or starts with a\n  // disallowed prefix.\n  var disallowedRequest = payloads.find(function (p) {\n    return ALCHEMY_DISALLOWED_METHODS.indexOf(p.method) >= 0 || ALCHEMY_DISALLOWED_PREFIXES.some(function (prefix) {\n      return p.method.startsWith(prefix);\n    });\n  }) || undefined;\n  return disallowedRequest && disallowedRequest.method;\n}\nfunction sendJsonRpcWithRetries(payload, alchemySendJsonRpc, _a) {\n  var maxRetries = _a.maxRetries,\n    retryInterval = _a.retryInterval,\n    retryJitter = _a.retryJitter;\n  return __awaiter(this, void 0, void 0, function () {\n    var i, result, status_1, message, statusString;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          i = 0;\n          _b.label = 1;\n        case 1:\n          if (!(i < maxRetries + 1)) return [3 /*break*/, 5];\n          return [4 /*yield*/, alchemySendJsonRpc(payload)];\n        case 2:\n          result = _b.sent();\n          switch (result.type) {\n            case \"jsonrpc\":\n              return [2 /*return*/, result.response];\n            case \"rateLimit\":\n              break;\n            case \"networkError\":\n              {\n                status_1 = result.status, message = result.message;\n                statusString = status_1 !== 0 ? \"(\" + status_1 + \") \" : \"\";\n                throw new Error(statusString + \" \" + message);\n              }\n            default:\n              return [2 /*return*/, assertNever(result)];\n          }\n          return [4 /*yield*/, delay(retryInterval + (retryJitter * Math.random() | 0))];\n        case 3:\n          _b.sent();\n          _b.label = 4;\n        case 4:\n          i++;\n          return [3 /*break*/, 1];\n        case 5:\n          throw new Error(\"Rate limited for \" + (maxRetries + 1) + \" consecutive attempts.\");\n      }\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/web3-adapter/sendJsonRpcPayload.ts"],"names":[],"mappings":"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","sourcesContent":["import assertNever from \"assert-never\";\nimport {\n  FullConfig,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  JsonRpcSenderMiddleware,\n  Provider,\n  SingleOrBatchRequest,\n  SingleOrBatchResponse,\n} from \"../types\";\nimport { delay, promisify } from \"../util/promises\";\nimport { AlchemySendJsonRpcFunction } from \"./alchemySend\";\n\nconst ALCHEMY_DISALLOWED_METHODS: string[] = [\n  \"eth_accounts\",\n  \"eth_sendTransaction\",\n  \"eth_sign\",\n  \"eth_signTypedData_v3\",\n  \"eth_signTypedData\",\n];\n\nconst ALCHEMY_DISALLOWED_PREFIXES: string[] = [\"personal\"];\n\nexport interface JsonRpcPayloadSender {\n  sendJsonRpcPayload: SendJsonRpcPayloadFunction;\n  setWriteProvider(writeProvider: Provider | null | undefined): void;\n}\n\nexport interface SendJsonRpcPayloadFunction {\n  (payload: JsonRpcRequest): Promise<JsonRpcResponse>;\n  (payload: SingleOrBatchRequest): Promise<SingleOrBatchResponse>;\n}\n\nexport function makeJsonRpcPayloadSender(\n  alchemySendJsonRpc: AlchemySendJsonRpcFunction,\n  config: FullConfig,\n): JsonRpcPayloadSender {\n  // Copy middlewares from config.\n  const middlewares: JsonRpcSenderMiddleware[] = [];\n  config.jsonRpcSenderMiddlewares.forEach((m) => middlewares.push(m));\n\n  let currentWriteProvider = config.writeProvider;\n  middlewares.push((payload) => {\n    const disallowedMethod = getDisallowedMethod(payload);\n    if (!disallowedMethod) {\n      try {\n        return sendJsonRpcWithRetries(payload, alchemySendJsonRpc, config);\n      } catch (alchemyError) {\n        // Fallback to write provider, but if both fail throw the error from\n        // Alchemy.\n        if (!currentWriteProvider) {\n          throw alchemyError;\n        }\n        try {\n          return sendJsonRpcWithProvider(currentWriteProvider, payload);\n        } catch {\n          throw alchemyError;\n        }\n      }\n    } else {\n      if (!currentWriteProvider) {\n        throw new Error(\n          `No provider available for method \"${disallowedMethod}\"`,\n        );\n      }\n      return sendJsonRpcWithProvider(currentWriteProvider, payload);\n    }\n  });\n\n  const sendJsonRpcPayload = (\n    payload: SingleOrBatchRequest,\n  ): Promise<SingleOrBatchResponse> => {\n    const getNext = (i: number) => {\n      const middleware = middlewares[i];\n      return () => middleware(payload, getNext(i + 1));\n    };\n    return getNext(0)();\n  };\n\n  function setWriteProvider(writeProvider: Provider | null | undefined) {\n    currentWriteProvider = writeProvider ?? null;\n  }\n\n  return {\n    sendJsonRpcPayload: sendJsonRpcPayload as SendJsonRpcPayloadFunction,\n    setWriteProvider,\n  };\n}\n\nfunction sendJsonRpcWithProvider(\n  provider: Provider,\n  payload: SingleOrBatchRequest,\n): Promise<SingleOrBatchResponse> {\n  const anyProvider: any = provider;\n  const sendMethod = (\n    anyProvider.sendAsync ? anyProvider.sendAsync : anyProvider.send\n  ).bind(anyProvider);\n  return promisify((callback) => sendMethod(payload, callback));\n}\n\nfunction getDisallowedMethod(\n  payload: SingleOrBatchRequest,\n): string | undefined {\n  const payloads = Array.isArray(payload) ? payload : [payload];\n\n  // Check if the payload method is a disallowed method or starts with a\n  // disallowed prefix.\n  const disallowedRequest =\n    payloads.find(\n      (p) =>\n        ALCHEMY_DISALLOWED_METHODS.indexOf(p.method) >= 0 ||\n        ALCHEMY_DISALLOWED_PREFIXES.some((prefix) =>\n          p.method.startsWith(prefix),\n        ),\n    ) || undefined;\n  return disallowedRequest && disallowedRequest.method;\n}\n\nasync function sendJsonRpcWithRetries(\n  payload: SingleOrBatchRequest,\n  alchemySendJsonRpc: AlchemySendJsonRpcFunction,\n  { maxRetries, retryInterval, retryJitter }: FullConfig,\n): Promise<SingleOrBatchResponse> {\n  for (let i = 0; i < maxRetries + 1; i++) {\n    const result = await alchemySendJsonRpc(payload);\n    switch (result.type) {\n      case \"jsonrpc\":\n        return result.response;\n      case \"rateLimit\":\n        break;\n      case \"networkError\": {\n        const { status, message } = result;\n        const statusString = status !== 0 ? `(${status}) ` : \"\";\n        throw new Error(`${statusString} ${message}`);\n      }\n      default:\n        return assertNever(result);\n    }\n    await delay(retryInterval + ((retryJitter * Math.random()) | 0));\n  }\n  throw new Error(`Rate limited for ${maxRetries + 1} consecutive attempts.`);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}